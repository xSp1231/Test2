
auto定义迭代器很好用

#include<bits/stdc++.h>
#define int long long
using namespace std;
const int N=1e4+9;
string str[N];
map<string,int>mp;
signed main() {
	 mp.insert(pair<string, int>("hello", 9));//向map里面插入元素 以一对的形式插入 
	 mp.insert(pair<string, int>("world", 7));
	 mp.insert(pair<string, int>("!!!123", 2));
	 map<string ,int>::iterator it;
	 for( it=mp.begin();it!=mp.end();it++){
	 	cout<<(*it).first<<" "<<(*it).second<<endl;
	 }
	 
	 /* map<string ,int>::iterator it;
	 for( it=mp.begin();it!=mp.end();it++){
	 	cout<<(*it).first<<" "<<(*it).second<<endl;
	 } 
	 
	 等价于：auto 相当于定义了一个迭代器 简单好记 
	 for( auto it=mp.begin();it!=mp.end();it++){
	 	cout<<(*it).first<<" "<<(*it).second<<endl;
	 } 
	 */
//	 cout<<mp["hello"]; 
	 
	 //查找元素； 
	 //cout()函数用来判断map里面是否含有指定的键。有则返回1 无就返回0 
	cout << mp.count("hello") << endl;
	//用find函数来定位数据出现的位置，它返回一个迭代器   
   // map<string,int>::iterator it;//设置迭代器； 
	 it = mp.find("world");//迭代器是一个键值对   auto it 定义it 是一个键值对。 
	if (it!=mp.end()) {
		cout << "要找元素的值为"<<(*it).second<<endl;
	}
	else {
		cout << "没有找到" << endl;
	}
	
	
	//如果要删除!!!123，用迭代器删除
	   auto itmm = mp.find("!!!123");
	   mp.erase(itmm);
	   
	   //遍历元素
	   //map<string, int>::iterator itl;
	   for ( it = mp.begin(); it != mp.end(); it++) {
		   cout << (*it).second;
	   }
	   cout << endl;
	   //如果要删除student_second，用关键字删除
	   /*int n = mp.erase("hello");
	   for (it = mapStudent.begin(); it != mapStudent.end(); it++) {
		   cout << (*it).second;
	   }
	   cout << endl;
 
      //成片删除
	   mapStudent.erase(mapStudent.begin(),mapStudent.end());*/


	return 0;
}
