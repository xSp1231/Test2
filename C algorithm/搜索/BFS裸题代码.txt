 4.1AcWing 844 走迷宫

给定一个 n×m 的二维整数数组，用来表示一个迷宫，数组中只包含 0 或 1，其中 0 表示可以走的路，1 表示不可通过的墙壁。最初，有一个人位于左上角 (1,1) 处，已知该人每次可以向上、下、左、右任意一个方向移动一个位置。请问，该人从左上角移动至右下角 (n,m) 处，至少需要移动多少次。数据保证 (1,1) 处和 (n,m) 处的数字为 0，且一定至少存在一条通路。

输入格式

第一行包含两个整数 n和 m。

接下来 n 行，每行包含 m 个整数（0 或 1），表示完整的二维数组迷宫。

输出格式

输出一个整数，表示从左上角移动至右下角的最少移动次数。

数据范围

1≤n,m≤100

输入样例：

5 5
0 1 0 0 0
0 1 0 1 0
0 0 0 0 0
0 1 1 1 0
0 0 0 1 0
输出样例：

8
解题思路：这里需要注意只有所以边权重一样时，才能用BFS来求最短路。这个题是用BFS来求的，因为BFS是每次一层一层的搜索，因此第一次搜到的点就是最短路。BFS搜索如下图，一次一次的每次搜索都是看一下离自己最近的位置是否可以走。





代码

#include<bits/stdc++.h>
#include<stdio.h>
using namespace std;
#define int long long
const int N=1e2+9;
struct node {
	int x,y;
};
int a[N][N];
int dis[N][N];
int nx[4][2]= {0,1,1,0,-1,0,0,-1};
queue<node>q;
int ans=0;
signed main() {
	int n,m;
	cin>>n>>m;
	int i,j;
	for(i=1; i<=n; i++) {
		for(j=1; j<=m; j++) {
			cin>>a[i][j];
			dis[i][j]=-1;
		}
	}
	node t={1,1};
	q.push(t);
	dis[1][1]=0;
	while(!q.empty()) {
		node t=q.front();
		for(i=0; i<4; i++) {//每一个点都可以向四个方向拓展； 
			node now;
			now.x=t.x+nx[i][0];
			now.y=t.y+nx[i][1];
			if(now.x>n||now.x<1||now.y>m||now.y<1) {//如果越界 就退出一次循环 
				continue;
			}
			if(dis[now.x][now.y]==-1&&a[now.x][now.y]==0){//如果该点还未被访问 并且不是障碍 
				dis[now.x][now.y]=dis[t.x][t.y]+1;//给该点距离； 
				q.push(now);//将搜寻到的节点放入队列；
			}
		}
		q.pop();//这个点已经拓展完毕 可以踢出队列 
	}
	for(i=1;i<=n;i++){
		for(j=1;j<=m;j++){
			cout<<dis[i][j]<<" ";
		}
		cout<<endl;
	} 
	cout<<dis[n][m]<<endl;
	return 0;
}