#include<bits/stdc++.h>
using namespace std;
#define int long long
#define inf 0x3f3f3f3f
const int N=1e5+9;
struct node {
	int s;
	int e;
	int weight;
};
node a[N];
int pre[N];
int cmp(node a,node b){
	return a.weight<b.weight;//结构体排序 将权值从小到大排序；
}
int  find(int n) {
	if(pre[n]==n) {
		return n;
	} else {
		pre[n]=find(pre[n]);
		return pre[n];
	}
}
int  merge(int a,int b) {
	if(find(a)!=find(b)) {
		pre[find(a)]=find(b);
		return 1;//如果之前两个点不在同一个集合中 那么就将他们合并 之后返回 1 
	} else {
		return 0;
	}
}
signed main() {
	int n,m;
	cin>>n>>m;
	int i;
	for(i=1; i<=m; i++) {
		cin>>a[i].s>>a[i].e>>a[i].weight;
	}
	sort(a+1,a+m+1,cmp);
	/*cout<<endl;
	for(i=1;i<=m;i++){
		cout<<a[i].s<<" "<<a[i].e<<" "<<a[i].weight<<endl;
	}
	cout<<endl;*/
	for(i=1; i<=n; i++) {// n个点 
		pre[i]=i;//初始化祖先
	}
	int sum=0;
	int count=0;
	for(i=1; i<=m; i++) {
		if(merge(a[i].s,a[i].e)) { //（合并之后返回1 说明之前不在一个集合中）如果这两个顶点之前不在一个集合中，那么我现在就可以将他们合并 选取相应的权值
			sum+=a[i].weight;
			count++;
		}
		if(count==n-1) {
			break;
		}
	}
cout<<sum<<endl;
	return 0;
}

